{"/home/travis/build/npmtest/node-npmtest-diskdb/test.js":"/* istanbul instrument in package npmtest_diskdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-diskdb/lib.npmtest_diskdb.js":"/* istanbul instrument in package npmtest_diskdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_diskdb = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_diskdb = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-diskdb/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-diskdb && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_diskdb */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_diskdb\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_diskdb.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_diskdb.rollup.js'] =\n            local.assetsDict['/assets.npmtest_diskdb.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_diskdb.__dirname + '/lib.npmtest_diskdb.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-diskdb/node_modules/diskdb/lib/diskdb.js":"/*\n * diskDB\n * http://arvindr21.github.io/diskDB\n *\n * Copyright (c) 2014 Arvind Ravulavaru\n * Licensed under the MIT license.\n */\n\n'use strict';\n//global modules\nvar path = require('path'),\n    c = require('chalk'),\n    e = c.red,\n    s = c.green;\n\n//local modules\nvar util = require('./util');\n\n\nvar db = {\n    connect: function(path, collections) {\n        if (util.isValidPath(path)) {\n            var _db = {};\n            _db.path = path;\n            this._db = _db;\n            console.log(s('Successfully connected to : ' + path));\n            if (collections) {\n                this.loadCollections(collections);\n            }\n        } else {\n            console.log(e('The DB Path [' + path + '] does not seem to be valid. Recheck the path and try again'));\n            return false;\n        }\n        return this;\n    },\n    loadCollections: function(collections) {\n        if (!this._db) {\n            console.log(e('Initialize the DB before you add collections. Use : ', 'db.connect(\\'path-to-db\\');'));\n            return false;\n        }\n        if (typeof collections === 'object' && collections.length) {\n            for (var i = 0; i < collections.length; i++) {\n                var p = path.join(this._db.path, (collections[i].indexOf('.json') >= 0 ? collections[i] : collections[i] + '.json'));\n                if (!util.isValidPath(p)) {\n                    util.writeToFile(p);\n                }\n                var _c = collections[i].replace('.json', '');\n                this[_c] = new require('./collection')(this, _c);\n            }\n        } else {\n            console.log(e('Invalid Collections Array.', 'Expected Format : ', '[\\'collection1\\',\\'collection2\\',\\'collection3\\']'));\n        }\n        return this;\n    }\n\n};\n\nmodule.exports = db;\n","/home/travis/build/npmtest/node-npmtest-diskdb/node_modules/diskdb/lib/util.js":"/*\n * diskDB\n * http://arvindr21.github.io/diskDB\n *\n * Copyright (c) 2014 Arvind Ravulavaru\n * Licensed under the MIT license.\n */\n\n/*jshint -W027*/\nvar fs = require('fs');\nvar merge = require('merge');\nvar util = {};\n\nutil.isValidPath = function(path) {\n    return fs.existsSync(path);\n};\n\nutil.writeToFile = function(outputFilename, content) {\n    if (!content) {\n        content = [];\n    }\n    fs.writeFileSync(outputFilename, JSON.stringify(content, null, 0));\n};\n\nutil.readFromFile = function(file) {\n    return fs.readFileSync(file, 'utf-8');\n};\n\nutil.removeFile = function(file) {\n    return fs.unlinkSync(file);\n};\n\nutil.updateFiltered = function(collection, query, data, multi) {\n    // break 2 loops at once - multi : false\n    loop: for (var i = collection.length - 1; i >= 0; i--) {\n        var c = collection[i];\n        for (var p in query) {\n            if (p in c && c[p] == query[p]) {\n                collection[i] = merge(c, data);\n                if (!multi) {\n                    break loop;\n                }\n            }\n        }\n    }\n    return collection;\n};\n\n// [TODO] : Performance\nutil.removeFiltered = function(collection, query, multi) {\n    // break 2 loops at once -  multi : false\n    loop: for (var i = collection.length - 1; i >= 0; i--) {\n        var c = collection[i];\n        for (var p in query) {\n            if (p in c && c[p] == query[p]) {\n                collection.splice(i, 1);\n                if (!multi) {\n                    break loop;\n                }\n            }\n        }\n    }\n    return collection;\n};\n\n// [TODO] : Performance\nutil.finder = function(collection, query, multi) {\n    var retCollection = [];\n    loop: for (var i = collection.length - 1; i >= 0; i--) {\n        var c = collection[i];\n        for (var p in query) {\n            if (p in c && c[p] == query[p]) {\n                retCollection.push(collection[i]);\n                if (!multi) {\n                    break loop;\n                }\n            }\n        }\n    }\n    return retCollection;\n};\n\n/** recursive finder **/\nutil.ObjectSearcher = function() {\n    this.results = [];\n    this.objects = [];\n    this.resultIDS = {};\n};\n\nutil.ObjectSearcher.prototype.findAllInObject = function(object, valueOBj, isMulti) {\n    for (var objKey in object) {\n        this.performSearch(object[objKey], valueOBj, object[objKey]);\n        if (!isMulti && this.results.length == 1) {\n            return this.results;\n        }\n    }\n\n    while (this.objects.length !== 0) {\n        var objRef = this.objects.pop();\n        this.performSearch(objRef['_obj'], valueOBj, objRef['parent']);\n        if (!isMulti && this.results.length == 1) {\n            return this.results;\n        }\n    }\n\n    return this.results;\n};\n\nutil.ObjectSearcher.prototype.performSearch = function(object, valueOBj, opt_parentObj) {\n  for (var criteria in valueOBj) {\n    var query = {};\n    query[criteria] = valueOBj[criteria];\n    this.searchObject(object, query, opt_parentObj);\n  }\n\n  for (var i = 0; i < this.results.length; i++) {\n    var result = this.results[i];\n    for (var field in valueOBj) {\n      if (result[field] !== undefined) {\n        if (result[field] !== valueOBj[field]) {\n          this.results.splice(i, 1);\n        }\n      }\n    }\n  }\n};\n\nutil.ObjectSearcher.prototype.searchObject = function(object, valueOBj, opt_parentObj) {\n    for (var objKey in object) {\n        if (typeof object[objKey] != 'object') {\n            if (valueOBj[objKey] == object[objKey]) {\n                if (opt_parentObj !== undefined) {\n                    if (this.resultIDS[opt_parentObj['_id']] === undefined) {\n                        this.results.push(opt_parentObj);\n                        this.resultIDS[opt_parentObj['_id']] = '';\n                    }\n                } else {\n                    if (this.resultIDS[object['_id']] === undefined) {\n                        this.results.push(object);\n                        this.resultIDS[object['_id']] = '';\n                    }\n                }\n            }\n        } else {\n            var obj = object;\n            if (opt_parentObj !== undefined) {\n                obj = opt_parentObj;\n            }\n            var objRef = {\n                parent: obj,\n                _obj: object[objKey]\n            };\n\n            this.objects.push(objRef);\n        }\n    }\n};\n\nmodule.exports = util;\n","/home/travis/build/npmtest/node-npmtest-diskdb/node_modules/diskdb/lib/collection.js":"/*\n * diskDB\n * http://arvindr21.github.io/diskDB\n *\n * Copyright (c) 2014 Arvind Ravulavaru\n * Licensed under the MIT license.\n */\n\nvar util = require('./util'),\n    path = require('path'),\n    uuid = require('node-uuid');\n\nmodule.exports = function(db, collectionName) {\n    var coltn = {};\n    coltn.collectionName = collectionName;\n    coltn._f = path.join(db._db.path, (collectionName + '.json'));\n\n    coltn.find = function(query) {\n        var collection = JSON.parse(util.readFromFile(this._f));\n        if (!query || Object.keys(query).length === 0) {\n            return collection;\n        } else {\n            var searcher = new util.ObjectSearcher(); \n            return searcher.findAllInObject(collection, query, true);\n        }\n    };\n\n    coltn.findOne = function(query) {\n        var collection = JSON.parse(util.readFromFile(this._f));\n        if (!query) {\n            return collection[0];\n        } else {\n            var searcher = new util.ObjectSearcher(); \n            return searcher.findAllInObject(collection, query, false)[0];\n        }\n    };\n\n    coltn.save = function(data) {\n        var collection = JSON.parse(util.readFromFile(this._f));\n        if (typeof data === 'object' && data.length) {\n            if (data.length === 1) {\n                if (data[0].length > 0) {\n                    data = data[0];\n                }\n            }\n            var retCollection = [];\n            for (var i = data.length - 1; i >= 0; i--) {\n                var d = data[i];\n                d._id = uuid.v4().replace(/-/g, '');\n                collection.push(d);\n                retCollection.push(d);\n            }\n            util.writeToFile(this._f, collection);\n            return retCollection;\n        } {\n            data._id = uuid.v4().replace(/-/g, '');\n            collection.push(data);\n            util.writeToFile(this._f, collection);\n            return data;\n        }\n    };\n\n    coltn.update = function(query, data, options) {\n        var ret = {},\n            collection = JSON.parse(util.readFromFile(this._f)); // update\n        var records = util.finder(collection, query, true);\n        if (records.length) {\n            if (options && options.multi) {\n                collection = util.updateFiltered(collection, query, data, true);\n                ret.updated = records.length;\n                ret.inserted = 0;\n            } else {\n                collection = util.updateFiltered(collection, query, data, false);\n                ret.updated = 1;\n                ret.inserted = 0;\n            }\n        } else {\n            if (options && options.upsert) {\n                data._id = uuid.v4().replace(/-/g, '');\n                collection.push(data);\n                ret.updated = 0;\n                ret.inserted = 1;\n            } else {\n                ret.updated = 0;\n                ret.inserted = 0;\n            }\n        }\n        util.writeToFile(this._f, collection);\n        return ret;\n    };\n\n    coltn.remove = function(query, multi) {\n        if (query) {\n            var collection = JSON.parse(util.readFromFile(this._f));\n            if (typeof multi === 'undefined') {\n                multi = true;\n            }\n            collection = util.removeFiltered(collection, query, multi);\n\n            util.writeToFile(this._f, collection);\n        } else {\n            util.removeFile(this._f);\n            delete db[collectionName];\n        }\n        return true;\n    };\n\n    coltn.count = function() {\n        return (JSON.parse(util.readFromFile(this._f))).length;\n    };\n\n    return coltn;\n};\n"}